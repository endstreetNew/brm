@inject SessionService sessionservice
@inject BRMDbService db
@inject SocpenService ss
@inject StaticService sservice
@namespace Sassa.BRM.Pages.Admin
@using Sassa.Socpen.Data
@using BlazorApp1.Layout
@layout BlazorApp1.Layout.NoLayout
@inject IAlertService toast

<h5>Socpen Office Links</h5>

<div class="row">

    <div class="col">
        <div class="input-group mb-1">
            <span class="input-group-text">Region</span>
            <select class="form-select" @bind="regionId">
                <option value="" selected></option>
                @foreach (var region in sservice.GetRegions())
                {
                    <option value="@region.Key">@region.Value</option>
                }
            </select>
        </div>
    </div>
    <div class ="col">
        <button class="btn btn-primary active" @onclick="btnLoad_Click">Load</button>
    </div>
</div>

<div class="whiteArea">
    @if (IsLoaded)
    {
        <div class="row">
            <div class="col-12">
                <table class="table table-sm" style="font-size:x-small;">
                    <thead>
                        <tr>
                            <th scope="col">Office Id</th>
                            <th scope="col">Res Code</th>
                            <th scope="col">Office Name</th>
                            <th scope="col">Active</th>
                            <th scope="col">Linked</th>
                            <th scope="col">Action</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var u in regionOffices)
                        {
                            <tr style="@LineStyle(u)">
                                <td>@u.OfficeId</td>
                                <td>@u.ResCode</td>
                                <td>@u.OfficeName  </td>
                                <td><span class="@(u.IsActive ? "oi oi-check" : "oi oi-x")" aria-hidden="true"></span></td>
                                <td><span class="@(u.IsLinked ? "oi oi-check" : "oi oi-x")" aria-hidden="true"></span></td>
                                <td>
                                    <div class="input-group input-group-sm">
                                    @if (u.OfficeId == 0)
                                    {
                                        <span class="input-group-text input-group-sm">Brm Office</span>
                                            <select class="form-select"   @bind="u.LinkOfficeId">
                                                @foreach (var bOffice in BrmOffices)
                                                {
                                                    <option value="@bOffice.OfficeId">@bOffice.OfficeName</option>
                                                }
                                            </select>
                                        <div class="input-group-append input-group-sm">
                                        <button class="btn btn-primary btn-sm active" @onclick="@(() => btnLinkBRMOffice_Click(u))">Link BRM Office</button>
                                        </div>
                                        <button class="btn btn-primary btn-sm active" @onclick="@(() => btnCreateBrmOffice_Click(u))">Create BRM Office</button>
                                    }
                                    @if (u.ResCode == 0)
                                    {
                                        
                                            <span class="input-group-text input-group-sm">Socpen Office</span>
                                            <select class="form-select" @bind="u.LinkResCode">
                                                @foreach (var ulOffice in unlinkedSpOffices)
                                                {
                                                    <option value="@ulOffice.ResCode">@ulOffice.OfficeName</option>
                                                }
                                            </select>
                                            <div class="input-group-append input-group-sm">
                                                <button class="btn btn-primary btn-sm active" @onclick="@(() => btnLinkSocpenOffice_Click(u))">Link Socpen Office</button>
                                            </div>
                                    }
                                    @if(u.IsLinked)
                                    {
                                            <div class="input-group-append input-group-sm">
                                            <button class="btn btn-primary btn-sm active" @onclick="@(() => btnUnLinkOffice_Click(u))">Unlink Office</button>
                                        </div>
                                    }
                                    </div>
                                </td>
                            </tr>

                        }
                    </tbody>
                    </table>
                </div>
                <br/>
            </div>
            }
</div>

@code {
    protected List<RegionOffice> regionOffices;
    protected string regionId;
    protected bool IsLoaded = false;
    //protected decimal linkResCode;
    //protected decimal linkbrmId;

    protected List<RegionOffice> unlinkedSpOffices;
    protected List<RegionOffice> BrmOffices;

    protected override async Task OnInitializedAsync()
    {
        regionId = sessionservice.session.Office.RegionId;
        await GetRegionOffices();
    }

    protected async Task btnLoad_Click()
    {
        await GetRegionOffices();

    }

    protected async Task GetRegionOffices()
    {
        List<CustRescode> ResCodes = await ss.GetResCodes(regionId);
        regionOffices = StaticD.LocalOffices.Where(o => o.RegionId == regionId).OrderBy(o => o.OfficeName).Select(o =>
        new RegionOffice
        {
            OfficeId = int.Parse(o.OfficeId),
            RegionId = regionId,
            OfficeName = o.OfficeName,
            Status = o.ActiveStatus,
            ResCode = ResCodes.Where(r => r.OfficeId == decimal.Parse(o.OfficeId)).Any() ? ResCodes.Where(r => r.OfficeId == decimal.Parse(o.OfficeId)).FirstOrDefault().ResCode : 0
        }).ToList();
        BrmOffices = regionOffices.OrderBy(o => o.OfficeName).ToList();

        regionOffices.AddRange(ResCodes.Where(r => !regionOffices.Where(o => o.ResCode == r.ResCode).Any()).Select( r => 
        new RegionOffice
        {
            OfficeId = r.OfficeId == null? 0 : (int)r.OfficeId,
            RegionId = regionId,
            OfficeName = r.LocalOffice,
                Status = r.OfficeId == null || r.OfficeId == 0 ? "A" : BrmOffices.Where(o => o.OfficeId == (int)r.OfficeId).Any() ? BrmOffices.Where(o => o.OfficeId == (int)r.OfficeId).First().Status : "I",
            ResCode = r.ResCode
        }));

        regionOffices = regionOffices.OrderBy(o => o.OfficeName).ToList();
        unlinkedSpOffices = regionOffices.Where(r => r.OfficeId == 0).OrderBy(r => r.OfficeName).ToList();
        IsLoaded = true;
    }

    protected async void btnLinkBRMOffice_Click(RegionOffice u)
    {
        try
        {
            if(u.LinkOfficeId == 0)
            {
                toast.Warn("No Office selected to link");
                return;
            }
            await ss.LinkBrmOffice(u.ResCode,u.LinkOfficeId);
            IsLoaded = false;
            await GetRegionOffices();

        }
        catch(Exception ex)
        {
            toast.Error(ex.Message);
        }

    }
    protected async void btnLinkSocpenOffice_Click(RegionOffice u)
    {
        try
        {
            if(u.LinkResCode == 0)
            {
                toast.Warn("No Office selected to link");
                return;
            }
            //u.ResCode = linkResCode;
            await ss.LinkBrmOffice(u.LinkResCode,(decimal)u.OfficeId);
            IsLoaded = false;
            await GetRegionOffices();

        }
        catch(Exception ex)
        {
            toast.Error(ex.Message);
        }
    }
    protected async void btnUnLinkOffice_Click(RegionOffice u)
    {
        try
        {
            await ss.LinkBrmOffice(u.ResCode,0);
            IsLoaded = false;
            await GetRegionOffices();

        }
        catch(Exception ex)
        {
            toast.Error(ex.Message);
        }
    }
    protected async void btnCreateBrmOffice_Click(RegionOffice u)
    {
        try{
            if(BrmOffices.Where(o => o.OfficeName == u.OfficeName).Any())
            {
                throw new Exception("Can't create Office office exists, !");
            }
            await sservice.CreateOffice(u);
            IsLoaded = false;
            await GetRegionOffices();
        }
        catch(Exception ex)
        {
            toast.Error(ex.Message);
        }
    }
    protected string LineStyle(RegionOffice u)
    {
        if (u.OfficeId == 0) return "background-color:lightpink;";
        if (u.ResCode == 0 && u.Status != "A") return "background-color:lightgray;";
        if (u.ResCode != 0 && u.Status != "A") return "background-color:lightpink;";
        if (u.ResCode == 0 && u.Status == "A") return "background-color:lightpink;";
        if (u.ResCode != 0 && u.Status == "A") return "background-color:lightgreen;";
        return "background-color:lightyellow;";
    }

}
