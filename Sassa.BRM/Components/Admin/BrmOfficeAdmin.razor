@inject SessionService sessionservice
@inject BRMDbService db
@inject SocpenService ss
@inject StaticService sservice
@namespace Sassa.BRM.Pages.Admin
@using Sassa.Socpen.Data
@layout NoLayout
@inject IAlertService toast

<h5>BRM Office Admin</h5>

<div class="row">

    <div class="col">
        <div class="input-group mb-1">
            <span class="input-group-text">Region</span>
            <select class="form-select" @bind="regionId">
                <option value="" selected></option>
                @foreach (var region in sservice.GetRegions())
                {
                    <option value="@region.Key">@region.Value</option>
                }
            </select>
        </div>
    </div>
    <div class ="col">
        <button class="btn btn-primary active" @onclick="btnLoad_Click">Load</button>
    </div>
</div>

<div class="whiteArea">
    @if (IsLoaded)
    {
        <div class="row">
            <div class="col-12">
                <table class="table table-sm" style="font-size:x-small;">
                    <thead>
                        <tr>
                            <th scope="col">Office Id</th>
                            <th scope="col">Office Name</th>
                            <th scope="col">Active</th>
                            <th scope="col">Action</th>
                            <th scope="col">Migrate</th>
                            <th scope="col">Batching</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if(showOfficeConfirmation)
                        {
                            <Confirmation Title="Confirm Office move" Message="@OfficeConfirmationMessage" Ok="() => btnMove_Click()" Cancel="@(() => showOfficeConfirmation = false)"></Confirmation>
                        }
                        @foreach (var u in regionOffices)
                        {
                            <tr style="@(u.IsActive ? "background-color:lightgreen;":"background-color:lightgray;")">
                                <td>@u.OfficeId</td>
                                <td>
                                    <div class="input-group input-group-sm">
                                   <input class="form-control form-control-sm" type="text" @bind="u.OfficeName"> 
                                   <button class="btn btn-primary btn-sm active" @onclick="@(() => btnRename_Click(u))">Rename</button>
                                   </div>
                                    
                                </td>
                                <td>@u.IsActive</td>
                                <td>
                                    <button class="btn btn-primary btn-sm active" @onclick="@(() => btnActive_Click(u))">Set @(u.IsActive?"In":"")Active</button>
                                </td>
                                <td>
                                    @if(!u.IsActive)
                                    {
                                       <div class="input-group input-group-sm">

                                            <span class="input-group-text input-group-sm">Brm Office</span>
                                                <select class="form-select"   @bind="SelectedOfficeId">
                                                    @foreach (var bOffice in regionOffices.Where(o => o.IsActive))
                                                    {
                                                        <option value="@bOffice.OfficeId">@bOffice.OfficeName</option>
                                                    }
                                                </select>
                                            <div class="input-group-append input-group-sm">
                                                    <button class="btn btn-primary btn-sm active" @onclick="@(() => ConfirmOfficeMove(u))">Move</button>
                                            </div>
                                        
                                        </div>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-primary btn-sm active" @onclick="@(() => btnManualBatching_Click(u))">Set @(u.ManualBatch == "I" ? "Manual" : "Auto")-Batch</button>
                                </td>
                            </tr>

                        }
                    </tbody>
                    </table>
                </div>
                <br/>
            </div>
            }
</div>

@code {
    protected List<RegionOffice> regionOffices;
    protected string regionId;
    protected bool IsLoaded = false;
    protected int SelectedOfficeId;
    protected string fromOfficeId;

    protected bool showOfficeConfirmation;
    protected string OfficeConfirmationMessage;

    protected override async Task OnInitializedAsync()
    {
        regionId = sessionservice.session.Office.RegionId;
        await GetRegionOffices();
    }

    protected async Task btnLoad_Click()
    {
        await GetRegionOffices();

    }

    protected async Task GetRegionOffices()
    {
        List<CustRescode> ResCodes = await ss.GetResCodes(regionId);
        regionOffices = StaticDataService.LocalOffices.Where(o => o.RegionId == regionId).Select(o =>
        new RegionOffice
        {
            OfficeId = int.Parse(o.OfficeId),
            OfficeName = o.OfficeName,
            Status = o.ActiveStatus,
            ManualBatch = o.ManualBatch,
            //ResCode = ResCodes.Where(r => r.OfficeId == decimal.Parse(o.OfficeId)).Any() ? ResCodes.Where(r => r.OfficeId == decimal.Parse(o.OfficeId)).FirstOrDefault().ResCode : 0
        }).ToList();

        regionOffices = regionOffices.OrderBy(o => o.OfficeName).ToList();
        //unlinkedSpOffices = regionOffices.Where(r => r.OfficeId == 0).ToList();
        IsLoaded = true;
    }

    protected async void  btnActive_Click(RegionOffice u)
    {
        //toggle current Status
        string status  = u.Status == "A" ? "I" : "A";
        if (u.OfficeId > 0)
        {
            await sservice.ChangeOfficeStatus(u.OfficeId.ToString(),status);
        }
        if (u.ResCode > 0)
        {
            await ss.ChangeOfficeStatus(u.ResCode,status);
        }
        IsLoaded = false;
        await GetRegionOffices();
    }

    protected async void btnManualBatching_Click(RegionOffice u)
    {
        //toggle current Status
        string status = u.ManualBatch == "A" ? "A" : "I";
        if (u.OfficeId > 0)
        {
            await sservice.SaveManualBatch(u.OfficeId.ToString(), u.ManualBatch == "A" ? "I" : "A");
        }
        IsLoaded = false;
        await GetRegionOffices();
    }

    protected async void  btnRename_Click(RegionOffice u)
    {
        await sservice.ChangeOfficeName(u.OfficeId.ToString(),u.OfficeName);
        IsLoaded = false;
        await GetRegionOffices();
    }

    protected  void ConfirmOfficeMove(RegionOffice u)
    {
        fromOfficeId = u.OfficeId.ToString();
        OfficeConfirmationMessage = $"Are you sure you want to move all data from office {u.OfficeName} to {regionOffices.Where(r => r.OfficeId == SelectedOfficeId).First().OfficeName} " + Environment.NewLine + "This action cannot be undone!";
        showOfficeConfirmation = true;

    }

    protected async void btnMove_Click()
    {

        await sservice.MoveOffice(fromOfficeId, SelectedOfficeId);
        IsLoaded = false;
        await GetRegionOffices();
        showOfficeConfirmation = false;
    }


}
