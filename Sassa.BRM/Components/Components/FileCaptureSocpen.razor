@implements IDisposable;
@inject SessionService sessionservice
@inject BRMDbService db
@inject StaticService sservice
@inject IAlertService toast

@if (showBrmModal)
{

    <Newbrm br="@SelectedApplication" ModalClosed="OnModalClosed" BrmSave="OnBrmSaved" TargetBoxType="@rebox.RegType"></Newbrm>

}

@if(showConfirmRegion)
{
    <Confirmation Title="Confirm Region Change" Message="@regionChangeMessage" Cancel="CancelRegion" Ok="ConfirmedRegion"></Confirmation>
}

<div id="SocpenGrid">
            @if (DTSocPen != null)
            {
                <table class="table table-sm" style="font-size:small;">
                    <thead>
                        <tr>
                            <th scope="col">ID No</th>
                            <th scope="col">ID History</th>
                            <th scope="col">Action</th>
                            <th scope="col">Child ID No</th>
                            <th scope="col">Grant Type</th>
                            <th scope="col">Srd No</th>
                            <th scope="col">Status</th>
                            <th scope="col">Name</th>
                            <th scope="col">Surname</th>
                            <th scope="col">Application Date</th>
                            <th scope="col">Archive Year</th>
                            <th scope="col">Transaction Date</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var u in DTSocPen)
                        {
                        <tr style="@(u.Brm_Parent != null? "background-color:limegreen;": u.IsMergeCandidate  ? "background-color:gold;":"")">
                            <td>@u.Id</td>
                            <td>@u.IdHistory</td>
                            <td><button class="btn btn-primary btn-sm active" data-bs-toggle="modal" data-bs-target="#myModal" @onclick="@(() => btnNewCover_Click(u))">New Cover</button></td>
                            <td>@u.ChildId</td>
                            <td>@u.GrantName</td>
                            <td>@u.Srd_No</td>
                            <td>@u.Status</td>
                            <td>@u.Name</td>
                            <td>@u.SurName</td>
                            <td>@u.AppDate</td>
                            <td>@u.ARCHIVE_YEAR</td>
                            <td>@u.StatusDate</td>
                        </tr>
                        }

                    </tbody>
                </table>

            }
            else
            {
                <div style="padding: 10px 0 5px 0;">
                    <p>No data. Please search and applicant.</p>
                </div>
            }
        </div>
@code {

    [Parameter]
    public string txtSearchId { get; set; }

    [Parameter]
    public Reboxing rebox { get; set; }

    [Parameter]
    public List<Application> DTSocPen { get; set; } = new List<Application>();

    //used to set parents etc on new brm
    protected List<Application> DTBrm;
    protected Application SelectedApplication;


    bool showConfirmRegion = false;
    bool showBrmModal = false;
    // bool showManualCapture = false;

    string regionChangeMessage = "";
    // string manualGrantType = "";

    // protected override async Task OnInitializedAsync()
    // {

    // }


    private async Task btnNewCover_Click(Application a)
    {
        rebox.BoxNo = rebox.BoxNo.ToUpper();
        if (string.IsNullOrEmpty(rebox.BoxNo))
        {
            if (sessionservice.session.IsRmc())
            {
                toast.Error("a TDW BoxNo is required to capture at the RMC.");
                return;
            }
        }
        else
        {
            rebox = await db.GetBoxCounts(rebox);
        }

        a.TDW_BOXNO = rebox.BoxNo;
        a.MiniBox = rebox.MiniBox;
        if (rebox.MiniBox > 5)
        {
            toast.Error("Only 5 Miniboxes allowed.");
            return;
        }
        SelectedApplication = a;
        if (a.RegionId != sessionservice.session.Office.RegionId)
        {
            regionChangeMessage = $"Are you sure you want to change the region of this application from {sservice.GetRegion(a.RegionId)} to {sservice.GetRegion(sessionservice.session.Office.RegionId)} ?";
            showConfirmRegion = true;
        }
        //toast.Error($"Please set your region to {db.GetRegion(a.RegionId)} to capture this record");
        ConfirmedRegion();//Save normal capture
    }

    private void ConfirmedRegion()
    {
        showConfirmRegion = false;
        showBrmModal = true;
        StateHasChanged();
    }

    private void CancelRegion()
    {
        showConfirmRegion = false;
        showBrmModal = false;
        StateHasChanged();
    }

    private async Task OnBrmSaved(bool merge)
    {
        showBrmModal = false;

        await OnChanged();
        if (merge)
        {
            var parents = DTBrm.Where(s => s.Brm_Parent != null && s.Brm_Parent == s.Brm_BarCode && (s.BATCH_NO == SelectedApplication.BATCH_NO || s.BATCH_NO ==null)).ToList();
            await db.AutoMerge(SelectedApplication, parents);
            await db.SetParentBatchCount(SelectedApplication.BATCH_NO);
            await OnChanged();
        }
    }

    protected async Task OnChanged()
    {
        DTBrm = await db.SearchBRMID(txtSearchId);
        if (DTBrm.Any()) Merge();
    }

    protected void Merge()
    {
        if (DTSocPen == null && DTBrm == null)
        {
            return;
        }
        if (!DTSocPen.Any() && !DTBrm.Any())
        {
            return;
        }

        //Combination Grants
        foreach (var row in DTSocPen.Where(r => r.GrantType == "6"))
        {
            row.RowType = "C";
        }
        //NergeGrants
        foreach (var group in DTSocPen.GroupBy(d => d.AppDate).Where(g => g.Count() > 1))
        {
            foreach (var row in group.ToArray())
            {
                //Todo: test johan added to prevent merging to boxed records.
                //if (row.TDW_BOXNO != null) continue;
                row.RowType = "M";
            }
        }

        DTBrm = DTBrm == null ? new List<Application>() : DTBrm.ToList();
    }
    private void OnModalClosed()
    {
        SelectedApplication = null;
        showBrmModal = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        DTSocPen = null;
        DTBrm = null;
        SelectedApplication = null;
        GC.Collect();
    }
}
