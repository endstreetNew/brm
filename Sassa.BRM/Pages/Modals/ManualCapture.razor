@inject BRMDbService db
@inject Navigation Navigate
@inject IAlertService toast
@inject IJSRuntime JSRuntime
<!-- Bootstrap Modal Dialog -->
@if (ready)
{
    <div class="modal" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #0973B6">
                    <h5 class="modal-title">Application details.</h5>
                </div>
                <div class="modal-body">
                    <div class="input-group mb-1">
                        <!--!--><span class="input-group-text">Id Number</span>
                        <span type="text" class="form-control">@br.Id</span>
                    </div><!--!-->
                    <div class="input-group mb-1">
                        <!--!--><span class="input-group-text">Srd Number</span>
                        <span type="text" class="form-control">@br.Srd_No</span>
                    </div><!--!-->
                    <div class="input-group mb-1">
                        <span class="input-group-text">Grant Type</span>
                        <select class="form-select" @bind="@br.GrantType" disabled>
                            <option value="" selected>All...</option>
                            @foreach (var val in db.GetGrantTypes())
                            {

                                <option value="@val.Key">@val.Value</option>
                            }
                        </select>
                    </div>
                        <div class="input-group mb-1">
                            <span class="input-group-text">Region</span>
                            <select class="form-select" @bind="br.RegionId" disabled>
                                <option value="" selected>All...</option>
                                @foreach (var region in db.GetRegions())
                                {
                                    <option value="@region.Key">@region.Value</option>
                                }
                            </select>
                        </div>
                        <div class="input-group mb-1">
                            <!--!--><span class="input-group-text">Name</span>
                        <input type="text" class="form-control" @bind-value="@br.Name">
                        </div><!--!-->
                        <div class="input-group mb-1">
                            <!--!--><span class="input-group-text">Surname</span>
                        <input type="text" class="form-control" @bind-value="@br.SurName">
                        </div><!--!-->
                    <div>
                        <label class="control-label font-weight-bold" Text="Please select the Application Type:"></label>
                        <div class="form-group">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="flexRadioDefault" @onclick="(() => { br.TRANS_TYPE = 0;})" checked="@(br.TRANS_TYPE == 0)">
                                <label class="form-check-label" for="rbApplication"> Application</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="flexRadioDefault" @onclick="(() => { br.TRANS_TYPE = 1;})" checked="@(br.TRANS_TYPE == 1)">
                                <label class="form-check-label" for="rbLC"> Loose Correspondence</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="flexRadioDefault" @onclick="(() => { br.TRANS_TYPE = 2;})" checked="@(br.TRANS_TYPE == 2)">
                                <label class="form-check-label" for="rbReview"> Review</label>
                            </div>
                        </div>
                        @if (br.TRANS_TYPE == 1)
                        {
                            <div class="input-group mb-1" Visible="false">
                                <span class="input-group-text">Loose Correspondence Type</span>
                                <select class="form-select" @bind="@br.LcType">
                                    <option selected>select...</option>
                                    @foreach (var lctype in db.GetLcTypes())
                                    {
                                        <option value=@lctype.Key>@lctype.Value</option>
                                    }
                                </select>
                            </div>
                        }
                        @if (childIdVisible)
                        {
                            <div class="input-group mb-1">
                                <span class="input-group-text">Child Id</span>
                                <input type="text" class="form-control" @bind-value="@br.ChildId">
                            </div>
                        }
                        <div class="input-group mb-1">
                            <span class="input-group-text">Status</span>
                            <select class="form-select" @bind="@br.AppStatus">
                                <option selected>select...</option>
                                <option value="MAIN">ACTIVE</option>
                                <option value="ARCHIVE">INACTIVE</option>
                            </select>
                        </div>
                        <div class="input-group mb-1">
                            <span class="input-group-text">Application Date</span>
                            <input type="date" class="form-control" @bind="@SelectedAppDate">
                        </div>
                        <div class="form-group">
                            <h2 class="text-center form-group"></h2>
                            <p>Please scan a new TDW sticker to put onto the file.</p>
                        </div>
                        <div class="input-group mb-1">
                            <span class="input-group-text">BRM Barcode</span>
                            <input type="text" class="form-control" @bind-value="@br.Brm_BarCode">
                        </div>
                        <CriticalDocuments GrantType="@br.GrantType" DocsPresent="@br.DocsPresent" DocsChanged="OnDocsChanged"></CriticalDocuments>
                    </div>
                    <br />
                    @if (showOverWrite)
                    {
                        <div class="form-group alert alert-danger">
                            <label>Duplicate BRM !</label>
                            @if (db.session.IsInRole("GRP_BRM_Monitoring"))
                            {
                                <button @onclick="btnOverwrite_Click" class="btn btn-warning active" style="float: right;">Overwrite</button>
                            }
                            else
                            {
                                <p class="text-danger">Only members of the BRM_Monitoring group can overwrite this record.</p>
                            }
                        </div>
                    }
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="btnCancel_Click">Close</button>
                        <button ID="btnFileDetail" @onclick="btnOk_Click" class="btn btn-primary active">Save and print Cover</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Application br { get; set; }
    [Parameter]
    public string TargetBoxType { get; set; } = null;

    [Parameter]
    public EventCallback ModalClosed { get; set; }

    [Parameter]
    public EventCallback<bool> BrmSave { get; set; }

    bool grantTypeVisible;
    Dictionary<string, string> grantTypes;
    //Dictionary<decimal, string> lcTypes;
    bool childIdVisible;
    bool ready = false;
    bool showOverWrite = false;
    DateTime? SelectedAppDate;

    protected override void OnInitialized()
    {

        grantTypeVisible = false;
        childIdVisible = false;

        br.IsNew = true;
        if (br.GrantType == "0") //Old Age Grant : •	Be able to capture GIA where the system only reflects OA.
        {
            grantTypes = db.GetGrantTypes().Where(i => "08".Contains(i.Key)).ToDictionary(i => i.Key, i => i.Value);
            //ddlGtype.SelectedValue = br.GrantType;
            grantTypeVisible = true;
        }
        if ("6C59".Contains(br.GrantType))//•	Any child grant can change to CSG, FCG and CDG - •	When you see CSG and you want to capture FCG
        {
            //•	When the rejected CDG is not visible, the system only reflects the active FCG users must be able to capture the rejected CDG.
            //•	If a child is transferred from one beneficiary to another and the child information is missing on the new beneficiary, the users must be able to capture the missing child information.
            //•	When you see a CSG, but you are looking for CDG, users must be able to add the CDG(grant type).
            //•	When you are looking CSG and the system is showing active FCG, the user must be able to add the CSG.
            grantTypes = db.GetGrantTypes().Where(i => "6C59".Contains(i.Key)).ToDictionary(i => i.Key, i => i.Value);
            //ddlGtype.SelectedValue = result.GrantType;
            grantTypeVisible = true;
            //Allow capture of missing child Id
            //•	When the child ID is not showing, you can scan it(then column under child Id No is blank)
            //if (string.IsNullOrEmpty(br.ChildId))
            //{
                childIdVisible = true;
            //}
        }
        SelectedAppDate = br.AppDate.ToDate("dd/MMM/yy");
        ready = true;
        base.OnInitialized();

    }
    private void OnDocsChanged(string docspresent)
    {
        br.DocsPresent = docspresent;
    }
    protected async Task btnOverwrite_Click()
    {
        if (!IsValid()) return;
        await Save($"Freecapture Overwrite selected by : {db.session.SamName}");
    }

    private async Task btnOk_Click()
    {
        string socpenDate = br.AppDate;
        string reason = $"Freecapture by : {db.session.SamName}";
        br.AppDate = SelectedAppDate.ToStandardDateString();
        br.OfficeId = db.session.Office.OfficeId;
        if (socpenDate != br.AppDate)
        {
            reason = $"Freecapture with date {br.AppDate} for {socpenDate} by : {db.session.SamName} ";
        }
        if (!IsValid()) return;
        br.Brm_BarCode = br.Brm_BarCode.ToUpper().Trim();
        if (db.checkBRMExists(br.Brm_BarCode))
        {
            await Task.Delay(10);
            showOverWrite = true;
            //StateHasChanged();
            return;
        }
        await Save(reason);
    }
    private async Task Save(string reason)
    {

        try
        {
            if (string.IsNullOrEmpty(br.AppDate))
            {
                throw new Exception("An Application Date is Required.");
            }
            if (!string.IsNullOrEmpty(TargetBoxType))
            {
                if (br.IsPreservedType && !string.IsNullOrEmpty(br.TDW_BOXNO))
                {
                    if ((TargetBoxType.Contains("LC") && !br.AppStatus.Contains("LC")) || (!TargetBoxType.Contains("LC") && br.AppStatus.Contains("LC")))
                    {
                        throw new Exception($"Filetype / Boxtype mismatch expecting {TargetBoxType} file.");
                    }
                    //if (!(TargetBoxType.Contains("LC") && br.AppStatus.Contains("LC")))
                    //{
                    //    if (TargetBoxType != br.AppStatus)
                    //    {
                    //        throw new Exception($"Filetype / Boxtype mismatch expecting {TargetBoxType} file.");
                    //    }
                    //}
                }
            }
            DcFile file = await db.CreateBRM(br,reason);
            br.BATCH_NO = file.BatchNo.ToString();
            br.Clm_No = file.UnqFileNo;

            await BrmSave.InvokeAsync(br.IsMergeCandidate);
            //Run sync on purpose
            await db.SetBatchCount(br.BATCH_NO);
            await JSRuntime.InvokeAsync<object>("open",System.Threading.CancellationToken.None, $"coversheet/{br.Brm_BarCode}", "_blank");
            //Navigate.NavigateTo($"coversheet/{br.Brm_BarCode}");
        }
        catch (TaskCanceledException ex)
        {
            toast.Error(ex.Message);
            // Check ex.CancellationToken.IsCancellationRequested here.
            // If false, it's pretty safe to assume it was a timeout.
        }
        catch (Exception ex)
        {
            toast.Error(ex.Message);
            btnCancel_Click();
        }

    }

    private void btnCancel_Click()
    {
        ModalClosed.InvokeAsync();
    }

    private bool IsValid()
    {
        try //Catch from validation errors in thistry
        {
            if (string.IsNullOrEmpty(br.Name) || string.IsNullOrEmpty(br.SurName)) throw new Exception("Beneficiary name and surname is required.");
            if (string.IsNullOrEmpty(br.Brm_BarCode) || br.Brm_BarCode.Trim().Length != 8) throw new Exception("Invalid Brm Barcode.");
            br.Brm_BarCode = br.Brm_BarCode.ToUpper();
            if (grantTypeVisible)
            {
                if (string.IsNullOrEmpty(br.GrantType))
                {
                    throw new Exception("Invalid GrantType.");
                }
            }
            if (br.TRANS_TYPE == null) throw new Exception("Please select an application type.");
            if (br.TRANS_TYPE == 1 && (string.IsNullOrEmpty(br.LcType) || br.LcType.Trim() =="0")) throw new Exception("Invalid Loose Correspondence type.");

            if ("6C59".Contains(br.GrantType) && childIdVisible)
            {
                if (string.IsNullOrEmpty(br.ChildId) || br.ChildId.Trim().Length != 13) throw new Exception("Child Id is invalid.");
            }
            if (!string.IsNullOrEmpty(br.LcType.Trim('0'))  )
            {
                if (!br.AppStatus.StartsWith("LC-"))
                {
                    br.AppStatus = "LC-" + br.AppStatus;
                }
            }
            br.Source = "ManualCapture";

            return true;
        }
        catch (Exception ex)
        {
            toast.Error(ex.Message);
            return false;
        }
    }
}
