@page "/"
@inject TimedService ts;
@inject IConfiguration config;

<PageTitle>Progress page</PageTitle>

<h1>DC_SOCPEN data update progress</h1>
<br />
<hr/>

<div class="col float-right">
    <div class="input-group input-group-sm">
        <div class="input-group-prepend"><span class="input-group-text">Next Update :</span></div>
        <input @bind=ts.Globals.NextRefreshDate class="form-control" type="date" />
        <input class="form-control" type="time" @bind=Scheduletime />
    </div>
</div>

<button type="button" class="btn btn-primary btn-sm form-control" @onclick="@(() => Start_Click())">@(ts.Globals.Status ? "Stop" : "Start")</button>

Last update :<span>@ts.Globals.LastRunDate.ToString()</span>
Current Task:<span>@ts.Globals.Progress</span>



@code{


    TimeOnly Scheduletime { get; set; } = TimeOnly.FromDateTime(DateTime.Now);
    protected override void OnInitialized()
    {
        ts.Globals = JsonFileUtils.ReadJson<TimedService.GlobalVars>(ts.fileName);
        if(ts.Globals.Status)
        {
            ts.StartAsync(CancellationToken.None);
        }
    }
    protected void Start_Click()
    {
        ts.Globals.Status = !ts.Globals.Status;
        ts.Globals.NextRefreshDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, Scheduletime.Hour, Scheduletime.Minute, 0);
        ts.Globals.NextRefreshTime = Scheduletime;
        JsonFileUtils.WriteJson(ts.Globals,ts.fileName);
        if (ts.Globals.Status)
        {
            ts.StartAsync(CancellationToken.None);
        }
        else
        {
            ts.StopAsync(CancellationToken.None);
        }
    }


}