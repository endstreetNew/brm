@page "/account/reset/{UserName}"

@inject UserManager<SassaUser> userManager
@inject NavigationManager navigationManager
@inject IDataProtectionProvider dataProtectionProvider
@inject SMSSender sender
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<div class="modal" tabindex="-1" style="display:block;" role="dialog">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login</h5>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        <EditForm Model="@signInModel" OnValidSubmit="@ChangePassword">
                            <DataAnnotationsValidator />
                            <div class="form-group row">
                                <label for="Password" class="col-sm-4" style="white-space:nowrap">Temporary Password</label>
                                <InputText type="password" @bind-Value="signInModel.TempPassword" class="form-control col-sm-4" />
                            </div>
                            <div class="form-group row">
                                <label for="Password" class="col-sm-4" style="white-space:nowrap">New Password</label>
                                <InputText type="password" @bind-Value="signInModel.Password" class="form-control col-sm-4" />
                            </div>
                            <div class="form-group row">
                                <label for="RepeatPassword" class="col-sm-4" style="white-space:nowrap">Repeat Password</label>
                                <InputText type="password" @bind-Value="signInModel.VerifyPassword" class="form-control col-sm-4" />
                            </div>
                            <hr />
                            <ValidationSummary />
                            @if (!showSignInError)
                            {
                                <button type="submit" class="btn btn-primary" >Change Password</button>
                            }
                            <button @onclick="@Cancel" class="btn btn-primary">Cancel</button>
                        </EditForm>

                        @if (showSignInError)
                        {
                            <div class="text-danger">
                                @ErrMessage
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string UserName { get; set; }
    private ResetModel signInModel = new ResetModel();
    private bool showSignInError = false;
    SassaUser user;
    private string ErrMessage;

    protected override async Task OnInitializedAsync()
    {

        if (string.IsNullOrEmpty(UserName) || UserName == "0")
        {
            ErrMessage = "Username not found.";
            showSignInError = true;
            return;
        }
        user = await userManager.FindByEmailAsync(UserName);
        if (user == null)
        {
            ErrMessage = "Username not found.";
            showSignInError = true;
            return;
        }
        if (!string.IsNullOrEmpty(user.PasswordSalt))
        {
            Toaster.Info("Account not verified.", $"SMS Verification sent to {user.CellNumber}");
            await sender.SendSMSAsync(user.CellNumber, $"Sassa Temporary Password: {user.PasswordSalt}");
        }

    }
    private async Task ChangePassword()
    {
        if(signInModel.Password.Length < 8)
        {
            ErrMessage = "Please provide a password of at least 8 characters.";
        }

        if (user.PasswordSalt != signInModel.TempPassword || signInModel.Password != signInModel.VerifyPassword)
        {
            ErrMessage = "Could not verify your temp password.";
            showSignInError = true;
            return;
        }
        Toaster.Info("Password reset.", $"Password reset successful");
        user.IsResetting = false;
        user.PasswordSalt = null;
        user.PasswordHash = userManager.PasswordHasher.HashPassword(user, signInModel.Password);
        await userManager.UpdateAsync(user);

        //await userManager.AddPasswordAsync(user, signInModel.Password);
        //UserStore<ApplicationUser> store = new UserStore<ApplicationUser>();
        //store.SetPasswordHashAsync(cUser, hashedNewPassword);


        navigationManager.NavigateTo($"account/signin/{user.UserName}");

    }

    private Task Cancel()
    {
        navigationManager.NavigateTo("sassaaccount/logout", forceLoad: true);
        return Task.CompletedTask;
    }
}
